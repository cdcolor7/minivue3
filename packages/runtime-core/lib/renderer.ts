import { VNode, Fragment, Text } from './vnode'
import { createAppAPI, CreateAppFunction } from './apiCreateApp'
import { EMPTY_OBJ, ShapeFlags } from '@mini-dev-vue3/shared'
import { createComponentInstance, setupComponent } from './component'
import { ReactiveEffect } from '@mini-dev-vue3/reactivity'
import { queueJob, SchedulerJob } from './scheduler'
import { shouldUpdateComponent } from './componentRenderUtils'
export interface Renderer<HostElement = RendererElement> {
  render: RootRenderFunction<HostElement>
  createApp: CreateAppFunction<HostElement>
}

export type RootRenderFunction<HostElement = RendererElement> = (
  vnode: VNode | null,
  container: HostElement,
  isSVG?: boolean
) => void

export interface RendererElement extends RendererNode {}

export interface RendererNode {
  [key: string]: any
}

export interface RendererOptions<
  HostNode = RendererNode,
  HostElement = RendererElement
> {
  insert(el: HostNode, parent: HostElement, anchor?: HostNode | null): void
  remove(el: HostNode): void
  createElement(
    type: string,
    isSVG?: boolean,
    isCustomizedBuiltIn?: string
  ): HostElement
  createText(text: string): HostNode
  setText(node: HostNode, text: string): void
  setElementText(node: HostElement, text: string): void
  parentNode(node: HostNode): HostElement | null
  nextSibling(node: HostNode): HostNode | null
  querySelector?(selector: string): HostElement | null
  cloneNode?(node: HostNode): HostNode
}

type PatchFn = (
  n1: VNode | null, // null means this is a mount
  n2: VNode,
  container: RendererElement,
  anchor?: RendererNode | null,
  parentComponent?: any
) => void

type ProcessTextOrCommentFn = (
  n1: VNode | null,
  n2: VNode,
  container: RendererElement
) => void

export type MountComponentFn = (
  initialVNode: VNode,
  container: RendererElement,
  anchor: RendererNode | null,
  parentComponent: any
) => void

type PatchChildrenFn = (
  n1: VNode | null,
  n2: VNode,
  container: RendererElement,
  anchor: RendererNode | null,
  parentComponent: any
) => void

export type SetupRenderEffectFn = (
  instance: any,
  initialVNode: VNode,
  container: RendererElement,
  anchor: RendererNode | null
) => void

export function createRenderer<
  HostNode = RendererNode,
  HostElement = RendererElement
>(options: RendererOptions<HostNode, HostElement>) {
  return baseCreateRenderer(options)
}

function baseCreateRenderer(options: RendererOptions): any {
  const render: RootRenderFunction = (vnode, container) => {
    if (vnode == null) {
      if (container._vnode) {
        // unmount(container._vnode, null, null, true)
      }
    } else {
      patch(null, vnode, container)
    }
    // flushPostFlushCbs()
    container._vnode = vnode
  }

  const {
    insert: hostInsert,
    remove: hostRemove,
    createElement: hostCreateElement,
    createText: hostCreateText,
    setText: hostSetText,
    setElementText: hostSetElementText,
    parentNode: hostParentNode,
    nextSibling: hostNextSibling,
    cloneNode: hostCloneNode
  } = options

  const patch: PatchFn = (
    n1,
    n2,
    container,
    anchor = null,
    parentComponent = null
  ) => {
    if (n1 === n2) {
      return
    }
    // console.log('patch start');
    const { type, shapeFlag } = n2
    switch (type) {
      case Text:
        processText(n1, n2, container)
        break
      case Fragment:
        console.log('Fragment')
        processFragment(n1, n2, container, anchor, parentComponent)
        break
      default:
        if (shapeFlag & ShapeFlags.ELEMENT) {
          processElement(n1, n2, container, anchor, parentComponent)
        } else if (shapeFlag & ShapeFlags.STATEFUL_COMPONENT) {
          processComponent(n1, n2, container, anchor, parentComponent)
        }
    }
  }

  // 处理Fragment
  const processFragment = (
    n1: VNode | null,
    n2: VNode,
    container: RendererElement,
    anchor: RendererNode | null,
    parentComponent: any
  ) => {
    const fragmentStartAnchor = (n2.el = n1 ? n1.el : hostCreateText(''))!
    const fragmentEndAnchor = (n2.anchor = n1 ? n1.anchor : hostCreateText(''))!
    if (!n1) {
      hostInsert(fragmentStartAnchor, container, anchor)
      hostInsert(fragmentEndAnchor, container, anchor)
      // a fragment can only have array children
      // since they are either generated by the compiler, or implicitly created
      // from arrays.
      mountChildren(n2.children, container)
    } else {
      // a stable fragment (template root or <template v-for>) doesn't need to
      // patch children order, but it may contain dynamicChildren.
      // patchBlockChildren(n1.dynamicChildren,dynamicChildren,container,parentComponent)
      // n1, n2, el, null, parentComponent
      patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent)
    }
  }

  // 组件处理函数
  const processComponent = (
    n1: VNode | null,
    n2: VNode,
    container: RendererElement,
    anchor: RendererNode | null,
    parentComponent: any
  ) => {
    if (n1 == null) {
      // 组件挂载 - KeepAlive暂未实现
      mountComponent(n2, container, anchor, parentComponent)
    } else {
      updateComponent(n1, n2) // 组件更新
    }
  }

  const processElement = (
    n1: VNode | null,
    n2: VNode,
    container: RendererElement,
    anchor: RendererNode | null,
    parentComponent: any
  ) => {
    if (!n1) {
      mountElement(n2, container, anchor, parentComponent) // 节点挂载
    } else {
      patchElement(n1, n2, parentComponent) // 节点更新
    }
  }

  const mountElement = (
    vnode: VNode,
    container: RendererElement,
    anchor: RendererNode | null,
    parentComponent: any
  ) => {
    const { shapeFlag, props } = vnode
    // 1. 先创建 element
    // 基于可扩展的渲染 api
    const el = (vnode.el = hostCreateElement(vnode.type))
    // 支持单子组件和多子组件的创建
    if (shapeFlag & ShapeFlags.TEXT_CHILDREN) {
      // 子节点为文本
      hostSetElementText(el, vnode.children)
    } else if (shapeFlag & ShapeFlags.ARRAY_CHILDREN) {
      // 子节点为数组就需要依次调用 patch 递归来处理
      mountChildren(vnode.children, el)
    }
    // 处理 props
    if (props) {
      for (const key in props) {
        // todo
        // 需要过滤掉vue自身用的key
        // 比如生命周期相关的 key: beforeMount、mounted
        // const nextVal = props[key]
        // hostPatchProp(el, key, null, nextVal);
      }
    }

    hostInsert(el, container, anchor)
  }

  const mountChildren = (children: any, container: any) => {
    children.forEach((VNodeChild: any) => {
      // todo
      // 这里应该需要处理一下 vnodeChild
      // 因为有可能不是 vnode 类型
      patch(null, VNodeChild, container)
    })
  }

  const patchElement = (n1: VNode, n2: VNode, parentComponent: any) => {
    // 需要把 el 挂载到新的 vnode
    const el = (n2.el = n1.el!)
    // 对比 props
    // const oldProps = n1.props || EMPTY_OBJ
    // const newProps = n2.props || EMPTY_OBJ
    // patchProps(el, oldProps, newProps);

    // 全量对比 full diff
    patchChildren(n1, n2, el, null, parentComponent)
  }

  const patchChildren: PatchChildrenFn = (
    n1,
    n2,
    container,
    anchor,
    parentComponent
  ) => {
    const c1 = n1 && n1.children
    const prevShapeFlag = n1 ? n1.shapeFlag : 0
    const c2 = n2.children
    const { shapeFlag } = n2

    // 如果 n2 的 children 是 text 类型的话，直接重新设置一下 text 即可
    if (shapeFlag & ShapeFlags.TEXT_CHILDREN) {
      if (c2 !== c1) {
        hostSetElementText(container, c2 as string)
      }
    } else {
      // 如果之前是 array_children
      // 现在还是 array_children 的话
      // 那么我们就需要对比两个 children 啦
      if (prevShapeFlag & ShapeFlags.ARRAY_CHILDREN) {
        if (shapeFlag & ShapeFlags.ARRAY_CHILDREN) {
          patchKeyedChildren(c1, c2, container, anchor, parentComponent)
        }
      }
    }
  }

  function getSequence(arr: number[]): number[] {
    const p = arr.slice()
    const result = [0]
    let i, j, u, v, c
    const len = arr.length
    for (i = 0; i < len; i++) {
      const arrI = arr[i]
      if (arrI !== 0) {
        j = result[result.length - 1]
        if (arr[j] < arrI) {
          p[i] = j
          result.push(i)
          continue
        }
        u = 0
        v = result.length - 1
        while (u < v) {
          c = (u + v) >> 1
          if (arr[result[c]] < arrI) {
            u = c + 1
          } else {
            v = c
          }
        }
        if (arrI < arr[result[u]]) {
          if (u > 0) {
            p[i] = result[u - 1]
          }
          result[u] = i
        }
      }
    }
    u = result.length
    v = result[u - 1]
    while (u-- > 0) {
      result[u] = v
      v = p[v]
    }
    return result
  }

  // patch核心函数
  const patchKeyedChildren = (
    c1: any[],
    c2: any[],
    container: RendererElement,
    parentAnchor: RendererNode | null,
    parentComponent: any
  ) => {
    let i = 0
    const l2 = c2.length
    let e1 = c1.length - 1
    let e2 = l2 - 1

    const isSameVNodeType = (n1: any, n2: any) => {
      return n1.type === n2.type && n1.key === n2.key
    }

    while (i <= e1 && i <= e2) {
      const prevChild = c1[i]
      const nextChild = c2[i]

      if (isSameVNodeType(prevChild, nextChild)) {
        // 两个 child 相等，对比这两个 child 节点(从左往右比对)
        patch(prevChild, nextChild, container, parentAnchor, parentComponent)
      } else {
        break
      }
      i++
    }

    while (i <= e1 && i <= e2) {
      // 从右向左取值
      const prevChild = c1[e1]
      const nextChild = c2[e2]

      if (isSameVNodeType(prevChild, nextChild)) {
        // 两个 child 相等，对比这两个 child 节点(从右往左比对)
        patch(prevChild, nextChild, container, parentAnchor, parentComponent)
      } else {
        break
      }
      console.log('')
      e1--
      e2--
    }

    if (i > e1 && i <= e2) {
      // 如果是这种情况的话就说明 e2 也就是新节点的数量大于旧节点的数量
      // 也就是说新增了 vnode
      // 应该循环 c2
      // 锚点的计算：新的节点有可能需要添加到尾部，也可能添加到头部，所以需要指定添加的问题
      // 要添加的位置是当前的位置(e2 开始)+1
      // 因为对于往左侧添加的话，应该获取到 c2 的第一个元素
      // 所以我们需要从 e2 + 1 取到锚点的位置
      const nextPos = e2 + 1
      const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor
      while (i <= e2) {
        patch(null, c2[i], container, anchor, parentComponent)
        i++
      }
    } else if (i > e2 && i <= e1) {
      // 这种情况的话说明新节点的数量是小于旧节点的数量的
      // 那么我们就需要把多余的
      while (i <= e1) {
        hostRemove(c1[i].el)
        i++
      }
    } else {
      // 左右两边都比对完了，然后剩下的就是中间部位顺序变动的
      // 例如下面的情况
      // a,b,[c,d,e],f,g
      // a,b,[e,c,d],f,g

      let s1 = i
      let s2 = i
      const keyToNewIndexMap = new Map()
      let moved = false
      let maxNewIndexSoFar = 0
      // 先把 key 和 newIndex 绑定好，方便后续基于 key 找到 newIndex
      // 时间复杂度是 O(1)
      for (let i = s2; i <= e2; i++) {
        const nextChild = c2[i]
        keyToNewIndexMap.set(nextChild.key, i)
      }

      // 需要处理新节点的数量
      const toBePatched = e2 - s2 + 1
      let patched = 0
      // 初始化 从新的index映射为老的index
      // 创建数组的时候给定数组的长度，这个是性能最快的写法
      const newIndexToOldIndexMap = new Array(toBePatched)
      // 初始化为 0 , 后面处理的时候 如果发现是 0 的话，那么就说明新值在老的里面不存在
      for (let i = 0; i < toBePatched; i++) newIndexToOldIndexMap[i] = 0

      // 遍历老节点
      // 1. 需要找出老节点有，而新节点没有的 -> 需要把这个节点删除掉
      // 2. 新老节点都有的，—> 需要 patch
      for (i = s1; i <= e1; i++) {
        const prevChild = c1[i]
        // 如果老的节点大于新节点的数量的话，那么这里在处理老节点的时候就直接删除即可
        if (patched >= toBePatched) {
          hostRemove(prevChild.el)
          continue
        }

        let newIndex
        if (prevChild.key != null) {
          // 这里就可以通过key快速的查找了， 看看在新的里面这个节点存在不存在
          // 时间复杂度O(1)
          newIndex = keyToNewIndexMap.get(prevChild.key)
        } else {
          // 如果没key 的话，那么只能是遍历所有的新节点来确定当前节点存在不存在了
          // 时间复杂度O(n)
          for (let j = s2; j < e2; j++) {
            if (isSameVNodeType(prevChild, c2[j])) {
              newIndex = j
              break
            }
          }
        }

        // 因为有可能 nextIndex 的值为0（0也是正常值）
        // 所以需要通过值是不是 undefined 或者 null 来判断
        if (newIndex === undefined) {
          // 当前节点的key 不存在于 newChildren 中，需要把当前节点给删除掉
          hostRemove(prevChild.el)
        } else {
          // 新老节点都存在
          // 把新节点的索引和老的节点的索引建立映射关系
          // i + 1 是因为 i 有可能是0 (0 的话会被认为新节点在老的节点中不存在)
          newIndexToOldIndexMap[newIndex - s2] = i + 1
          // 来确定中间的节点是不是需要移动
          // 新的 newIndex 如果一直是升序的话，那么就说明没有移动
          // 所以我们可以记录最后一个节点在新的里面的索引，然后看看是不是升序
          // 不是升序的话，我们就可以确定节点移动过了
          if (newIndex >= maxNewIndexSoFar) {
            maxNewIndexSoFar = newIndex
          } else {
            moved = true
          }

          patch(prevChild, c2[newIndex], container, null, parentComponent)
          patched++
        }
      }

      // 利用最长递增子序列来优化移动逻辑
      // 因为元素是升序的话，那么这些元素就是不需要移动的
      // 而我们就可以通过最长递增子序列来获取到升序的列表
      // 在移动的时候我们去对比这个列表，如果对比上的话，就说明当前元素不需要移动
      // 通过 moved 来进行优化，如果没有移动过的话 那么就不需要执行算法
      // getSequence 返回的是 newIndexToOldIndexMap 的索引值
      // 所以后面我们可以直接遍历索引值来处理，也就是直接使用 toBePatched 即可
      const increasingNewIndexSequence = moved
        ? getSequence(newIndexToOldIndexMap)
        : []
      let j = increasingNewIndexSequence.length - 1

      // 遍历新节点
      // 1. 需要找出老节点没有，而新节点有的 -> 需要把这个节点创建
      // 2. 最后需要移动一下位置，比如 [c,d,e] -> [e,c,d]

      // 这里倒循环是因为在 insert 的时候，需要保证锚点是处理完的节点（也就是已经确定位置了）
      // 因为 insert 逻辑是使用的 insertBefore()
      for (let i = toBePatched - 1; i >= 0; i--) {
        // 确定当前要处理的节点索引
        const nextIndex = s2 + i
        const nextChild = c2[nextIndex]
        // 锚点等于当前节点索引+1
        // 也就是当前节点的后面一个节点(又因为是倒遍历，所以锚点是位置确定的节点)
        const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor

        if (newIndexToOldIndexMap[i] === 0) {
          // 说明新节点在老的里面不存在
          // 需要创建
          patch(null, nextChild, container, anchor, parentComponent)
        } else if (moved) {
          // 需要移动
          // 1. j 已经没有了 说明剩下的都需要移动了
          // 2. 最长子序列里面的值和当前的值匹配不上， 说明当前元素需要移动
          if (j < 0 || increasingNewIndexSequence[j] !== i) {
            // 移动的话使用 insert 即可
            hostInsert(nextChild.el, container, anchor)
          } else {
            // 这里就是命中了  index 和 最长递增子序列的值
            // 所以可以移动指针了
            j--
          }
        }
      }
    }
  }

  // 组件创建
  // 1. 创建组件实例 instance 2.  给 instance 加工 3. 安装渲染函数副作用
  const mountComponent: MountComponentFn = (
    initialVNode,
    container,
    anchor,
    parentComponent
  ) => {
    const instance = (initialVNode.component = createComponentInstance(
      initialVNode,
      parentComponent
    ))

    // 组件安装
    setupComponent(instance)

    // 安装渲染函数副作用
    setupRenderEffect(instance, initialVNode, container, anchor)
  }

  // 组件更新
  const updateComponent = (n1: VNode, n2: VNode) => {
    const instance = (n2.component = n1.component)!
    if (shouldUpdateComponent(n1, n2)) {
      // 那么 next 就是新的 vnode 了（也就是 n2）
      instance.next = n2
      // 调用 update 再次更新调用 patch 逻辑
      instance.update()
    } else {
      // 不需要更新的话，那么只需要覆盖下面的属性即可
      n2.component = n1.component
      n2.el = n1.el
      instance.vnode = n2
    }
  }

  const setupRenderEffect: SetupRenderEffectFn = (
    instance,
    initialVNode,
    container,
    anchor
  ) => {
    // 组件更新函数
    const componentUpdateFn = () => {
      if (!instance.isMounted) {
        const { bm, m, parent } = instance
        // beforeMount hook
        if (bm) {
          // invokeArrayFns(bm) // 触发 beforeMount 生命周期钩子
        }
        // 组件初始化的时候会执行
        // 在 effect 内调用 render 才能触发依赖收集
        // 等到后面响应式的值变更后会再次触发这个函数
        const proxyToUse = instance.proxy
        // 可在 render 函数中通过 this 来使用 proxy
        const subTree = (instance.subTree = instance.render.call(
          proxyToUse,
          proxyToUse
        ))
        patch(null, subTree, container, anchor, instance)
        initialVNode.el = subTree.el
        // mounted hook
        if (m) {
          // queuePostRenderEffect(m, parentSuspense) // 触发 Mounted生命周期钩子
        }
        instance.isMounted = true
      } else {
        // 拿到最新的 subTree
        const { next, vnode, bu, u } = instance

        // 如果有 next 的话， 说明需要更新组件的数据（props，slots 等）
        // 先更新组件的数据，然后更新完成后，在继续对比当前组件的子元素
        if (next) {
          next.el = vnode.el
          updateComponentPreRender(instance, next)
        }

        const proxyToUse = instance.proxy
        const nextTree = instance.render.call(proxyToUse, proxyToUse)
        // 替换之前的 subTree
        const prevTree = instance.subTree
        instance.subTree = nextTree

        // beforeUpdate hook
        if (bu) {
          // invokeArrayFns(bu) // 触发 beforeUpdate 生命周期钩子
        }

        // 用旧的 vnode 和新的 vnode 交给 patch 来处理
        patch(prevTree, nextTree, prevTree.el, null, instance)

        // 触发 updated hook
        // updated hook
        if (u) {
          // queuePostRenderEffect(u, parentSuspense) // 触发 Updated 生命周期钩子
        }
      }
    }

    function updateComponentPreRender(instance: any, nextVNode: VNode) {
      const { props } = nextVNode
      // console.log("更新组件的 props", props);
      instance.props = props
      // console.log("更新组件的 slots");
      // TODO 更新组件的 slots
    }

    // 创建副作用函数用于 组件更新
    const effect = new ReactiveEffect(
      componentUpdateFn,
      () => queueJob(instance.update)
      // instance.scope
    )
    const update = (instance.update = effect.run.bind(effect) as SchedulerJob)
    update.id = instance.uid
    effect.allowRecurse = update.allowRecurse = true
    update()
  }

  // 创建文本节点
  const processText: ProcessTextOrCommentFn = (n1, n2, container) => {
    console.log('处理 Text 节点')
    if (n1 === null) {
      // n1是null 说明是在初始化挂载阶段
      hostInsert((n2.el = hostCreateText(n2.children as string)), container)
    } else {
      // 先对比一下 updated 之后的内容是否和之前的不一样
      // 在不一样的时候才需要 update text
      // 注意，这里一定要记得把 n1.el 赋值给 n2.el, 不然后续是找不到值的
      const el = (n2.el = n1.el!)
      if (n2.children !== n1.children) {
        hostSetText(el, n2.children as string)
      }
    }
  }

  return {
    render,
    createApp: createAppAPI(render)
  }
}
